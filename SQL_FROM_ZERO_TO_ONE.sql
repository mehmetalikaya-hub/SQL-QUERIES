 --List names which begins with letter A;
SELECT * FROM CUSTOMERS WHERE CUSTOMERNAME LIKE 'A%'

--2 List names which begins with letter A and Gender is Male(Erkek);
SELECT * FROM CUSTOMERS WHERE CUSTOMERNAME LIKE 'A%' AND GENDER = 'E'

--3
SELECT * FROM CUSTOMERS WHERE BIRTHDATE BETWEEN '1990-01-01' AND '1995-12-31'
SELECT * FROM CUSTOMERS WHERE BIRTHDATE >= '1990-01-01' AND BIRTHDATE <= '1995-12-31'
SELECT YEAR('1990-01-01') AS YÝL
SELECT DATEPART(MONTH,'1990-05-01') AS AY
SELECT * FROM CUSTOMERS WHERE DATEPART(YEAR,BIRTHDATE) >='1990' AND DATEPART(YEAR, BIRTHDATE) <='1995'

--4 JOIN PRACTICES
SELECT C.*, CT.CITY FROM CUSTOMERS C
INNER JOIN CITIES CT ON C.CITYID = CT.ID
WHERE CT.CITY = 'ÝSTANBUL'

SELECT C.*, CT.CITY FROM CUSTOMERS C
INNER JOIN CITIES CT ON C.CITYID = CT.ID
WHERE CT.CITY IN('ÝSTANBUL','ADANA')

SELECT * FROM CITIES CT 
INNER JOIN DISTRICTS D ON CT.ID = D.CITYID
WHERE CT.CITY = 'ÝSTANBUL'

-- 5 SUBQUERY PRACTISES
SELECT
(SELECT CITY FROM CITIES WHERE ID = C.CITYID),
* FROM CUSTOMERS AS C
WHERE (SELECT CITY FROM CITIES WHERE ID = C.CITYID) = 'ÝSTANBUL'

SELECT 
* FROM CUSTOMERS C
WHERE C.CITYID IN
(SELECT ID FROM CITIES WHERE CITY IN ('ÝSTANBUL','ADANA'))

-- 6) FIND NUMBER OF CUSTOMERS FOR EACH CITIES
SELECT CT.CITY, COUNT(C.ID) AS TOPLAMMUSTERI FROM CUSTOMERS C 
INNER JOIN CITIES CT ON CT.ID = C.CITYID
GROUP BY CT.CITY

SELECT *,
(SELECT COUNT(*) FROM CUSTOMERS  WHERE CITYID = CT.ID) AS TOPLAMMUSTERI
FROM CITIES CT
ORDER BY 3

SELECT CT.CITY, COUNT(C.ID) AS TOPLAMMUSTERI FROM CUSTOMERS C
RIGHT JOIN CITIES CT ON C.CITYID = CT.ID
GROUP BY CT.CITY

--7  FIND NUMBER OF CUSTOMERS FOR EACH CITIES AND ALSO SHOULD BE GREATER THAN 10
SELECT CT.CITY, COUNT(C.ID) AS TOPLAMMUSTERI FROM CUSTOMERS C
INNER JOIN CITIES CT ON CT.ID = C.CITYID
GROUP BY CT.CITY
HAVING COUNT(C.ID) >10
ORDER BY 2 DESC

--SUBQUERY USING FOR THIS 
SELECT *,
(SELECT COUNT(*)  FROM CUSTOMERS WHERE C.ID = CITYID)
FROM CITIES C
WHERE (SELECT COUNT(*) FROM CUSTOMERS WHERE C.ID = CITYID) >10
ORDER BY 3 DESC

--8 FIND NUMBER OF MALE AND FEMALE FOR EACH CITIES
SELECT CT.CITY, COUNT(C.ID) AS TOPLAMMUSTERI, C.GENDER FROM CUSTOMERS C
INNER JOIN CITIES CT ON CT.ID = C.CITYID
GROUP BY CT.CITY, C.GENDER
ORDER BY 1,3

----------
--NOW WE WILL DO ANOTHER SQL EXERCISES VIA DIFFERENT DATABASE
-- FIND MONTH THAT HAS HIGHEST REVENUE
SELECT ITM.ITEMCODE,ITM.ITEMNAME,
(SELECT COUNT(AMOUNT) FROM ORDERDETAILS WHERE ITEMID = ITM.ID) AS SATISSAYISI,
(SELECT MIN(LINETOTAL) FROM ORDERDETAILS WHERE ITEMID = ITM.ID) AS MINFÝYAT,
(
SELECT TOP 1 DATEPART(MONTH,DATE_) FROM ORDERDETAILS OD 
INNER JOIN ORDERS O ON O.ID = OD.ORDERID
WHERE OD.ITEMID = ITM.ID
GROUP BY DATEPART(MONTH,DATE_)
) AS ENCOKSATILanAY
FROM ITEMS ITM
ORDER BY ITM.ITEMNAME



 --9 USE SUBQUERY 
SELECT CITY AS SEHIRADI,
(SELECT COUNT(*) FROM CUSTOMERS WHERE CT.ID = CITYID AND GENDER = 'E') AS ERKEKSAYÝSÝ,
(SELECT COUNT(*) FROM CUSTOMERS WHERE CT.ID = CITYID AND GENDER = 'K') AS KADÝNSAYÝSÝ,
(SELECT COUNT(*) FROM CUSTOMERS WHERE CT.ID = CITYID) AS TOPLAMKÝSÝSAYÝSÝ
FROM CITIES CT 

--10 ADD DIFFERENT COLUMN
ALTER TABLE CUSTOMERS ADD AGEGROUP VARCHAR(50)

--11 UPDATE THE NEW COLUMN AND DETERMINE AGE RANGE
SELECT *, DATEDIFF(YEAR,BIRTHDATE,GETDATE()) AS YAS   FROM CUSTOMERS

UPDATE CUSTOMERS SET AGEGROUP = '20-35 YAÞ' WHERE DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 20 AND 35
UPDATE CUSTOMERS SET AGEGROUP = '36-45 YAÞ' WHERE DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 36 AND 45
UPDATE CUSTOMERS SET AGEGROUP = '46-55 YAÞ' WHERE DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 46 AND 55
UPDATE CUSTOMERS SET AGEGROUP = '56-64 YAÞ' WHERE DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 56 AND 64
UPDATE CUSTOMERS SET AGEGROUP = '65+ YAÞ'  WHERE DATEDIFF(YEAR,BIRTHDATE,GETDATE())   > 65

--12 HOW MANY PERSON THERE?
SELECT AGEGROUP, COUNT(*) AS TOPLAMKÝSÝ
FROM CUSTOMERS
GROUP BY AGEGROUP
ORDER BY 2 ASC
-- USE CASE WHEN TO FIND THE SAME RESULT
SELECT 
CASE 
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 20 AND 35 THEN '20-35 YAS ARASI'
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 36 AND 45 THEN '36-45 YAS ARASI'
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 46 AND 55 THEN '46-55 YAS ARASI'
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 56 AND 65 THEN '56-65 YAS ARASI'
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) > 65 THEN '65 YAS ÜSTÜ'
   END AGEGROUP,
   COUNT(*) AS TOPLAMMUSTERISAYÝSÝ
FROM CUSTOMERS
GROUP BY
CASE 
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 20 AND 35 THEN '20-35 YAS ARASI'
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 36 AND 45 THEN '36-45 YAS ARASI'
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 46 AND 55 THEN '46-55 YAS ARASI'
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 56 AND 65 THEN '56-65 YAS ARASI'
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) > 65 THEN '65 YAS ÜSTÜ'
END 
ORDER BY 1

--CREATE DYNAMIC VIEW
SELECT AGEGROUP2,COUNT(TMP.ID) AS TOPLAMMUSTERI FROM 
(
SELECT *,
CASE 
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 20 AND 35 THEN '20-35 YAS ARASI'
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 36 AND 45 THEN '36-45 YAS ARASI'
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 46 AND 55 THEN '46-55 YAS ARASI'
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) BETWEEN 56 AND 65 THEN '56-65 YAS ARASI'
   WHEN DATEDIFF(YEAR,BIRTHDATE,GETDATE()) > 65 THEN '65 YAS ÜSTÜ'
   END AGEGROUP2
   FROM CUSTOMERS
) TMP
   GROUP BY AGEGROUP2

--13 FIND THE PEOPLE WHO LIVE IN ISTANBUL CITY BUT NOT IN KADIKOY DISTRICT

JOIN ÝLE

SELECT * FROM CUSTOMERS C 
INNER JOIN CITIES CT ON CT.ID = C.CITYID
INNER JOIN DISTRICTS D ON D.ID = C.DISTRICTID
WHERE CT.CITY = 'ÝSTANBUL' AND NOT  D.DISTRICT NOT IN(<>) NOT LIKE ('KADIKÖY')

SUBQUERY ÝLE

SELECT * FROM CUSTOMERS 
WHERE CITYID IN( SELECT ID FROM CITIES WHERE CITY = 'ÝSTANBUL') AND DISTRICTID NOT IN
(SELECT ID FROM DISTRICTS WHERE DISTRICT = 'KADIKÖY')


--14 USE JOIN AND LOOK IF IS THERE ANY NULL VALUES

SELECT * FROM CITIES WHERE CITY = 'ANKARA'
SELECT * FROM CUSTOMERS WHERE CITYID = 6

----------------
--CATEGORIZE EACH CREDIT CARD TYPE IN TERM OF PAYING TYPE
SELECT DATEPART(MONTH,DATE_) AS AY, 
DATEPART(YEAR,DATE_) AS YIL,
CASE	
	WHEN PAYMENTTYPE = 1 THEN 'KREDÝ KARTI'
	WHEN PAYMENTTYPE = 2 THEN 'PEÞÝN'
END AS ODEMETURU,
SUM(PAYMENTTOTAL) AS TOTALPAY
FROM PAYMENTS
GROUP BY PAYMENTTYPE,DATEPART(MONTH,DATE_),DATEPART(YEAR,DATE_)
ORDER BY DATEPART(MONTH,DATE_),DATEPART(YEAR,DATE_)

--CUSTOMERS DATABASE AND SQL QUERIES
SELECT * FROM CUSTOMERS C
LEFT JOIN CITIES CT ON CT.ID = C.CITYID
WHERE CT.CITY IS NULL

DELETE FROM CITIES WHERE CITY = 'ANKARA'

-- SUBQUERY
SELECT * FROM CUSTOMERS
WHERE CITYID NOT IN(SELECT ID FROM CITIES)


--15 ADD DATA WHICH AUTOMATICALLY DELETED
SET IDENTITY_INSERT TABLE_NAME ON KOMUTU KULLANILIR...

SELECT * FROM CITIES

SET IDENTITY_INSERT CITIES ON

INSERT INTO CITIES (ID,CITY)
VALUES (34,'ÝSTANBUL')

--16 USING SUBSTRING 

SELECT *,
SUBSTRING(TELNR1,1,5) AS OPERATOR1,
SUBSTRING(TELNR2,1,5) AS OPERATOR2
FROM CUSTOMERS


SELECT *, 
SUBSTRING(TELNR1,2,3) AS OP1,
SUBSTRING(TELNR2,2,3) AS OP2
FROM CUSTOMERS


--18 WHAT OPERATOR TYPE DO WE HAVE? FIND THE NUMBER OF THAT

SELECT 
SUM(TELNR1_X_OPERATORSAYISI + TELNR2_X_OPERATORSAYISI) AS XOPERATORSAYÝSÝ,
SUM(TELNR1_Y_OPERATORSAYISI + TELNR2_Y_OPERATORSAYISI) AS YOPERATORSAYÝSÝ,
SUM(TELNR1_Z_OPERATORSAYISI + TELNR2_Z_OPERATORSAYISI) AS ZOPERATORSAYÝSÝ

FROM 
(
SELECT
CASE 
    WHEN TELNR1 LIKE '(50%' OR TELNR1 LIKE '(55%' THEN 1
	ELSE 0
	END AS TELNR1_X_OPERATORSAYISI,
CASE 
    WHEN TELNR1 LIKE '(54%' THEN 1
	ELSE 0
	END AS TELNR1_Y_OPERATORSAYISI,
CASE 
    WHEN TELNR1 LIKE '(53%' THEN 1
	ELSE 0
	END AS TELNR1_Z_OPERATORSAYISI,

CASE 
    WHEN TELNR2 LIKE '(50%' OR TELNR2 LIKE '(55%' THEN 1
	ELSE 0
	END AS TELNR2_X_OPERATORSAYISI,
CASE 
    WHEN TELNR2 LIKE '(54%' THEN 1
	ELSE 0
	END AS TELNR2_Y_OPERATORSAYISI,
CASE 
    WHEN TELNR2 LIKE '(53%' THEN 1
	ELSE 0
	END AS TELNR2_Z_OPERATORSAYISI,
  * FROM CUSTOMERS
 ) T

--19 ACCORDING TO CITIES AND DISTRICTS WHERE IS THE HIGHEST CUSTOMER COUNT?

SELECT CT.CITY, D.DISTRICT, COUNT(C.ID) AS MUSTERISAYÝSÝ FROM CUSTOMERS C
INNER JOIN CITIES CT ON CT.ID = C.CITYID
INNER JOIN DISTRICTS D ON D.ID = C.DISTRICTID
GROUP BY CT.CITY,D.DISTRICT
ORDER BY 1,3 DESC

--20 SET LANGUAGE TURKISH

SET LANGUAGE turkish
SELECT 
CUSTOMERNAME,DATENAME(DW,BIRTHDATE) AS BIRTHDAY
 FROM CUSTOMERS

--21 FIND THE PEOPLE WHO HAVE BIRTHDAY

SELECT CUSTOMERNAME FROM
CUSTOMERS
WHERE MONTH(BIRTHDATE) = MONTH(GETDATE())
AND 
DAY(BIRTHDATE) = DAY(GETDATE())

--22 HOW MONY WORKERS DO WE HAVE IF WE WANT TO GET STILL WORKING 
SELECT *  FROM PERSON WHERE OUTDATE IS NULL	
SELECT * FROM PERSON WHERE OUTDATE IS NOT NULL


--23 LIST THE MALE AND FEMALE PERSON COUNT ACCORDING TO THEIR DEPARTMENT
SELECT D.DEPARTMENT,
CASE 
   WHEN P.GENDER = 'E'    THEN 'ERKEK'
   ELSE 'KADIN'
   END AS GENDER,
COUNT(P.ID) AS TOPLAMCALÝSAN FROM PERSON P
INNER JOIN DEPARTMENT D ON D.ID = P.DEPARTMENTID
WHERE P.OUTDATE IS NULL
GROUP BY D.DEPARTMENT,P.GENDER
ORDER BY 1,2



--24 USINGS SUBQUERY TO GET SAME RESULT
SELECT DEPARTMENT,
(SELECT COUNT(*) FROM PERSON WHERE DEPARTMENTID = D.ID AND OUTDATE IS NULL AND GENDER ='E') AS ERKEKCALÝSAN,
(SELECT COUNT(*) FROM PERSON WHERE DEPARTMENTID=D.ID AND OUTDATE IS NULL AND GENDER ='K') AS KADÝNCALÝSAN,
(SELECT COUNT(*) FROM PERSON WHERE DEPARTMENTID=D.ID AND OUTDATE IS NULL) AS TOPLAMCALÝSAN
FROM DEPARTMENT D
ORDER BY D.DEPARTMENT

--25 FIND MIN, MAX AND AVG SALARY WHERE POSITION IS PLANNING CHEF
SELECT POSITION,
MIN(PR.SALARY) AS MINMAAS,
MAX(PR.SALARY) AS MAXMAAS,
AVG(PR.SALARY) AS ORTALAMAMAAS FROM POSITION P
INNER JOIN PERSON PR ON PR.POSITIONID = P.ID
WHERE P.POSITION = 'PLANLAMA ÞEFÝ'
GROUP BY P.POSITION


--SUBQUERY

SELECT POS.POSITION,
(SELECT MIN(SALARY) FROM PERSON WHERE POS.ID = POSITIONID) AS ENDUSUKMAAS,
(SELECT ROUND(AVG(SALARY),0) FROM PERSON WHERE POS.ID = POSITIONID) AS ORTALAMAMAAS ,
(SELECT ROUND(MAX(SALARY),0) FROM PERSON WHERE POS.ID = POSITIONID)  AS MAXMAAS

FROM POSITION POS
WHERE POS.POSITION = 'PLANLAMA ÞEFÝ'

--26 FIND THE FIRST AVG SALARY AND WORKER COUNT
SELECT POS.POSITION,
COUNT(P.ID) AS TOPLAMKÝSÝSAYÝSÝ,
ROUND(AVG(P.SALARY),0) AS ORTALAMAMAAS  FROM POSITION POS
INNER JOIN PERSON P ON P.POSITIONID = POS.ID
WHERE P.OUTDATE IS NULL
GROUP BY POS.POSITION
ORDER BY 1

--SUBQUERY
SELECT POS.POSITION,
(SELECT COUNT(ID) FROM PERSON WHERE PERSON.POSITIONID = POS.ID AND OUTDATE IS NULL) AS PERSONCOUNT,
(SELECT ROUND(AVG(SALARY),0) FROM PERSON WHERE POSITIONID = POS.ID AND OUTDATE IS NULL) AS ORTALAMAMAAS

FROM POSITION POS
ORDER BY 1

--27 HOW MANY MONTHS DO PEOPLE WORK(STILL WORKING AND NOT WORKING)
SELECT  NAME_ + ' '+ SURNAME AS PERSON_ ,
INDATE,OUTDATE,
CASE
	WHEN OUTDATE IS NOT NULL THEN DATEDIFF(MONTH,INDATE,OUTDATE)
	ELSE DATEDIFF(MONTH,INDATE,GETDATE())
END AS  WORKINGTIME_MONTH

FROM PERSON
ORDER BY 4 DESC


-- 2ND WAY
SELECT  NAME_ + ' '+ SURNAME AS PERSON_ ,
INDATE,OUTDATE,
CASE
	WHEN OUTDATE IS NULL THEN 'ÝÞE DEVAM EDÝYOR'
	ELSE 'ÝÞTEN AYRILDI'
	END AS CALÝSMADURUMU,
CASE
	WHEN OUTDATE IS NOT NULL THEN DATEDIFF(MONTH,INDATE,OUTDATE)
	ELSE DATEDIFF(MONTH,INDATE,GETDATE())
END AS  WORKINGTIME_MONTH

FROM PERSON
ORDER BY 5 DESC

--28 STRING MANIPULATION
SELECT
LEFT(NAME_,1) + '.'+ LEFT(SURNAME,1) + '.' AS SHORTNAME, COUNT(*) PERSONELCOUNT
 FROM PERSON
 GROUP BY LEFT(NAME_,1) , LEFT(SURNAME,1) 
 ORDER BY 2 DESC

--
 SELECT
 SUBSTRING(NAME_,1,1) + '.' + SUBSTRING(SURNAME,1,1) + '.' AS SHORTNAME , COUNT(*) AS TOTALCUSTOMER
 
  FROM PERSON
  GROUP BY  SUBSTRING(NAME_,1,1), SUBSTRING(SURNAME,1,1) 


--29
SELECT DP.DEPARTMENT, ROUND(AVG(P.SALARY),0) AS ORTALAMAMAAS FROM DEPARTMENT DP
INNER JOIN PERSON P ON P.DEPARTMENTID = DP.ID
GROUP BY DP.DEPARTMENT
HAVING ROUND(AVG(P.SALARY),0) >5500

--30
SELECT DP.DEPARTMENT,
(SELECT ROUND(AVG(SALARY),0) FROM PERSON P WHERE P.DEPARTMENTID = DP.ID)  AS ORTALAMAMAAS
FROM DEPARTMENT DP
WHERE (SELECT ROUND(AVG(SALARY),0) FROM PERSON P WHERE P.DEPARTMENTID = DP.ID) >5500

--31
SELECT * FROM
(
SELECT DP.DEPARTMENT, ROUND(AVG(P.SALARY),0) AS ORTALAMAMAAS FROM DEPARTMENT DP
INNER JOIN PERSON P ON DEPARTMENTID = DP.ID
GROUP BY DP.DEPARTMENT
) T
WHERE ORTALAMAMAAS  > 5500



--32

SELECT DEPARTMENT,AVG(WORKINGTIME) AS ORTALAMACALISMA
FROM
(
SELECT D.DEPARTMENT,
CASE WHEN OUTDATE IS NOT NULL THEN DATEDIFF(MONTH,INDATE,OUTDATE)
ELSE DATEDIFF(MONTH,INDATE,GETDATE()) 
END AS WORKINGTIME
 FROM PERSON P 
INNER JOIN DEPARTMENT D ON D.ID = P.DEPARTMENTID
) T GROUP BY DEPARTMENT

-- FIND THE HIERARCICAL TREE

SELECT 
P.NAME_ + ' ' + P.SURNAME AS PERSON,PS.POSITION,
P2.NAME_ + ' ' + P2.SURNAME AS MANAGERNAME,
PS2.POSITION AS MANAGERPOSITION

FROM PERSON P
INNER JOIN POSITION PS ON PS.ID = P.POSITIONID
INNER JOIN PERSON P2 ON P2.ID = P.MANAGERID
INNER JOIN POSITION PS2 ON PS2.ID = P2.POSITIONID
WHERE P.NAME_ + ' ' + P.SURNAME IN ('Metin ÝLÝK','Emre ÜNNÜ','Birgül SAYIALÝOÐLU','Edanur KURDOGLU',
'Nazife ALAGEYÝK','Zeynep BAKIRÖZÜ')


-- TOTAL SALES BY EACH CITIES

SELECT S.CITY,SUM(S.LINETOTAL) AS TOPLAMSATÝS FROM SALEORDERS S

GROUP BY S.CITY
ORDER BY 1

-- TOTAL SALES BY EACH CITIES FOR EACH MONTH

SELECT CITY, MONTH_, SUM(LINETOTAL) AS TOPLAMSATÝS
FROM SALEORDERS
GROUP BY CITY,MONTH_
ORDER BY CITY,MONTH_

-- IN WHAT DAY DO WHE HAVE MAX SALES NUMBER

SELECT CITY,DAYOFWEEK_, MAX(LINETOTAL) AS MAXSATÝSMIKTAR FROM SALEORDERS
GROUP BY CITY,DAYOFWEEK_
ORDER BY CITY,DAYOFWEEK_

-- FIND SALES FOR EACH DAYS 

SELECT CITY,
(SELECT SUM(LINETOTAL) FROM SALEORDERS WHERE CITY = S.CITY AND DAYOFWEEK_='01.PZT') AS PAZARTESÝ,
(SELECT SUM(LINETOTAL) FROM SALEORDERS WHERE CITY = S.CITY AND DAYOFWEEK_ = '02.SAL') AS SALI,
(SELECT SUM(LINETOTAL) FROM SALEORDERS WHERE CITY = S.CITY AND DAYOFWEEK_ = '03.ÇAR') AS CARSAMBA,
(SELECT SUM(LINETOTAL) FROM SALEORDERS WHERE CITY = S.CITY AND DAYOFWEEK_ = '04.PER') AS PERSEMBE,
(SELECT SUM(LINETOTAL) FROM SALEORDERS WHERE CITY = S.CITY AND DAYOFWEEK_ = '05.CUM') AS CUMA,
(SELECT SUM(LINETOTAL) FROM SALEORDERS WHERE CITY = S.CITY AND DAYOFWEEK_ = '06.CMT') AS CUMARTESÝ,
(SELECT SUM(LINETOTAL) FROM SALEORDERS WHERE CITY = S.CITY AND DAYOFWEEK_ = '07.PAZ') AS PAZAR
FROM SALEORDERS S

GROUP BY CITY
ORDER BY CITY

-- FIND THE 5 HIGHEST SALES AMOUNT
SELECT  S.CITY,S1.CATEGORY1,SUM(S1.TOTALSALE) AS TOTALSALE
FROM SALEORDERS S
CROSS APPLY(SELECT TOP 5 CATEGORY1, SUM(LINETOTAL) AS TOTALSALE FROM SALEORDERS WHERE CITY=S.CITY GROUP BY CATEGORY1 ORDER BY 2 DESC) S1
GROUP BY S.CITY,S1.CATEGORY1
ORDER BY S.CITY,SUM(TOTALSALE) DESC


-- USE JOIN AND CREATE A FLAT TABLE

SET LANGUAGE Turkish
SELECT U.USERNAME_,U.NAMESURNAME, U.TELNR1,
U.TELNR2,CT.COUNTRY,C.CITY,T.TOWN, ADR.ADDRESSTEXT, OD.ORDERID,
O.DATE_, IT.ITEMCODE,IT.ITEMNAME, CONVERT(DATE,O.DATE_) AS DATE_,
CONVERT(time,O.DATE_) AS TIME,
DATEPART(YEAR,O.DATE_) AS YEAR_, DATENAME(MONTH,O.DATE_) AS MONTH, DATENAME(DW,O.DATE_) AS DAYOFWEEK_ FROM USERS U

INNER JOIN ORDERS O ON O.USERID = U.ID
INNER JOIN ADDRESS ADR ON ADR.ID = O.ADDRESSID
INNER JOIN COUNTRIES CT ON CT.ID = ADR.COUNTRYID
INNER JOIN CITIES C ON C.ID = ADR.CITYID
INNER JOIN TOWNS T ON T.ID = ADR.TOWNID
INNER JOIN ORDERDETAILS OD ON OD.ORDERID = O.ID
INNER JOIN ITEMS IT ON IT.ID = OD.ITEMID



--FLAT TABLE CONTINUES

SET LANGUAGE Turkish
SELECT O.ID, U.USERNAME_,U.NAMESURNAME, U.TELNR1,
U.TELNR2,CT.COUNTRY,C.CITY,T.TOWN, ADR.ADDRESSTEXT,O.ID AS ORDERID,
IT.ITEMCODE,IT.ITEMNAME,IT.BRAND,
IT.CATEGORY1,IT.CATEGORY2,IT.CATEGORY3,IT.CATEGORY4,
OD.AMOUNT,OD.UNITPRICE,OD.LINETOTAL,
CONVERT(DATE,O.DATE_) AS ORDERDATE_,
CONVERT(time,O.DATE_) AS ORDERTIME,
DATEPART(YEAR,O.DATE_) AS YEAR_,
DATENAME(MONTH,O.DATE_) AS MONTH_,
DATENAME(DW,O.DATE_) AS DAYOFWEEK_ 
INTO SALEORDERS
FROM USERS U

INNER JOIN ORDERS O ON O.USERID = U.ID
INNER JOIN ADDRESS ADR ON ADR.ID = O.ADDRESSID
INNER JOIN COUNTRIES CT ON CT.ID = ADR.COUNTRYID
INNER JOIN CITIES C ON C.ID = ADR.CITYID
INNER JOIN TOWNS T ON T.ID = ADR.TOWNID
INNER JOIN ORDERDETAILS OD ON OD.ORDERID = O.ID
INNER JOIN ITEMS IT ON IT.ID = OD.ITEMID


SELECT * FROM SALEORDERS



-- TOTAL SALES GROUPED BY ALL CITIES
SELECT CT.CITY, SUM(O.TOTALPRICE) AS TOTALSALE FROM ORDERS O
INNER JOIN ADDRESS AD ON AD.ID = O.ADDRESSID
INNER JOIN CITIES CT ON CT.ID = AD.CITYID
GROUP BY CT.CITY
ORDER BY CT.CITY

----
----------
SELECT CITY, COUNT(*) AS TOPLAMFÝSSAYÝSÝ,
COUNT(DISTINCT FICHENO) AS TOPLAMTEKÝLFÝS,COUNT(DISTINCT CUSTOMERNAME) AS TEKÝLMUSTERÝ
FROM SALES
WHERE MONTHNAME_ = '01.OCAK'
GROUP BY CITY
ORDER BY TOPLAMTEKÝLFÝS DESC
SELECT * FROM SALES

------------
SELECT CITY,ROUND(SUM(TOTALPRICE),0) AS CÝRO
FROM SALES
GROUP BY CITY
HAVING ROUND(SUM(TOTALPRICE),0) > 100000
ORDER BY 2 DESC

---------
SELECT CITY,COUNT(DISTINCT CUSTOMERNAME) AS UNIQUE_CUSTOMER,
ROUND(SUM(TOTALPRICE),0) AS REVENUE
FROM SALES
GROUP BY CITY
HAVING COUNT(DISTINCT CUSTOMERNAME) >2000
ORDER BY 2 DESC

---------
SELECT CITY,COUNT(DISTINCT CUSTOMERNAME) AS UNIQUE_CUSTOMER,
ROUND(SUM(TOTALPRICE),0) AS REVENUE
FROM SALES
GROUP BY CITY
HAVING COUNT(DISTINCT CUSTOMERNAME) >=500
AND ROUND(SUM(TOTALPRICE),0) >30000
ORDER BY 2 DESC


-----------
SET STATISTICS IO ON
SELECT *,
(SELECT SUM(TOTALPRICE) FROM ORDERS WHERE ADDRESSID 
IN( SELECT ID FROM ADDRESS WHERE CITYID = C.ID)) AS TOTALSALE
FROM CITIES C


-- BRAND , CATEGORY AND SALES AMOUNTS

SELECT IT.BRAND,IT.CATEGORY1,SUM(OD.LINETOTAL) AS TOTALSALE FROM ITEMS IT
INNER JOIN ORDERDETAILS OD ON OD.ITEMID = IT.ID
GROUP BY IT.BRAND,IT.CATEGORY1
ORDER BY BRAND,TOTALSALE DESC

SELECT CATEGORY1,BRAND,SUM(LINETOTAL) AS TOTALSALE FROM ITEMS ITM
INNER JOIN ORDERDETAILS OD ON OD.ITEMID = ITM.ID
GROUP BY CATEGORY1,BRAND
ORDER BY CATEGORY1,SUM(LINETOTAL) DESC


--
SELECT ITM.BRAND,ITM.CATEGORY1,ITM.ITEMCODE,
ITM.ITEMNAME,COUNT(OD.ID) AS SALECOUNT, SUM(OD.AMOUNT) AS SALEAMOUNT,
MIN(OD.UNITPRICE) AS MINIMUMSATIS,
AVG(OD.UNITPRICE) AS ORTALAMASATIS,
MAX(OD.UNITPRICE) AS MAXASATIS
FROM ITEMS ITM
INNER JOIN ORDERDETAILS OD ON OD.ITEMID = ITM.ID
GROUP BY ITM.BRAND,ITM.CATEGORY1,ITM.ITEMCODE,ITM.ITEMNAME
ORDER BY CATEGORY1


--

SELECT C.CITY,TMP.NAMESURNAME,TMP.ADDRESSCOUNT,C.CITY, T.TOWN, D.DISTRICT,A.ADDRESSTEXT FROM 
(
SELECT U.ID,U.NAMESURNAME,
(SELECT COUNT(*) FROM ADDRESS WHERE USERID = U.ID) AS ADDRESSCOUNT,
(SELECT TOP 1 ADDRESSID FROM ORDERS WHERE USERID = U.ID ORDER BY DATE_ DESC) AS LASTADDRESSID

FROM USERS U
) TMP
INNER JOIN ADDRESS A ON A.ID = TMP.LASTADDRESSID
INNER JOIN CITIES C ON C.ID = A.CITYID
INNER JOIN TOWNS T ON T.ID = A.TOWNID
INNER JOIN DISTRICTS D ON D.ID = A.DISTRICTID


--- FIND THE REVENUE FOR 15 DAYS THAT LESS THAN 500.000 TL

SELECT CITY,COUNT(*) AS COUNTCITY FROM
(
SELECT C.CITY, CONVERT(DATE,O.DATE_) AS DATE_,
SUM(O.TOTALPRICE) AS TOTALPRICE FROM ORDERS O
INNER JOIN ADDRESS A ON A.ID = O.ADDRESSID
INNER JOIN CITIES C ON C.ID = A.CITYID
WHERE O.DATE_ BETWEEN '2019-01-01' AND '2019-01-31 23:59:59'
--AND C.CITY = 'HATAY'
GROUP BY C.CITY, CONVERT(DATE,O.DATE_)
HAVING SUM(O.TOTALPRICE) < 500
) TMP
GROUP BY CITY
HAVING COUNT(CITY) >= 15



-- CARDB DATABASE AND SQL QUERIES

SELECT BRAND, COUNT(*) AS BRANDCOUNT FROM WEBOFFERS
GROUP BY BRAND
ORDER BY 2 DESC

-- FIND THE PERCENTAGE

SELECT BRAND, COUNT(*) AS COUNT_,

ROUND(CONVERT(FLOAT,COUNT(*)) / (SELECT COUNT(*) FROM WEBOFFERS) * 100,2) AS PERCENTAGE

FROM WEBOFFERS
GROUP BY BRAND
ORDER BY 2 DESC

--

SELECT CITY, 
(SELECT COUNT(*) FROM WEBOFFERS WHERE CITYID = C.ID) AS TOTALCARCOUNT,
(SELECT COUNT(*) FROM WEBOFFERS WHERE CITYID = C.ID AND FROMWHO = 'SAHÝBÝNDEN') AS SAHÝBÝNDENCOUNT,
(SELECT COUNT(*) FROM WEBOFFERS WHERE CITYID = C.ID AND FROMWHO ='GALERÝDEN') AS GALERÝDENCOUNT

FROM CITY C
ORDER BY 2 DESC

--
SELECT U.NAMESURNAME,C.CITY,T.TOWN,D.DISTRICT,
W.TITLE,W.BRAND,W.MODEL,W.KM,W.PRICE,
W.SHIFTTYPE,W.FUEL,W.COLOR
FROM WEBOFFERS W
INNER JOIN CITY C ON C.ID = W.CITYID
INNER JOIN TOWN T ON T.ID =W.TOWNID
INNER JOIN DISTRICT D ON D.ID = W.DISTRICTID
INNER JOIN USER_ U ON U.ID = W.USERID
WHERE C.CITY = 'ÝSTANBUL'
AND W.BRAND = 'Volkswagen' AND W.MODEL = 'Passat'
AND W.SHIFTTYPE IN ('Otomatik Vites','Yarý Otomatik Vites')
AND W.FUEL = 'Dizel'
AND W.FROMWHO = 'Sahibinden' AND
W.YEAR_ BETWEEN 2014 AND 2018
ORDER BY W.KM,W.PRICE DESC

-- 
SELECT TITLE, BRAND, MODEL , PRICE, DATEDIFF(YEAR,YEAR_,GETDATE()) AS ARABA_YAS,
CASE 
	WHEN DATEDIFF(YEAR,YEAR_,GETDATE()) >=30
	THEN 'HURDA TESVÝK ALABÝLÝR EN YAKIN DEVLET DAÝRESÝNE BASVURUN'
	ELSE 'HURDA TESVÝK ÝCÝN UYGUN BÝR ARAC DEGÝL'
END AS HURDATESVÝKANALÝZ
FROM WEBOFFERS
ORDER BY ARABA_YAS DESC


--------
SELECT 
CASE 
	WHEN KM <=0
	THEN '0 KÝLOMETRE ARAÇ'
	WHEN KM >0 
	THEN '2.EL ARAÇ'
	END AS KMSORGU,
KM,TITLE,BRAND,MODEL,PRICE,FUEL FROM WEBOFFERS
WHERE PRICE > 100000
ORDER BY 1

-- GOODS ANALYSIS WITH SUBQUERY

SELECT ITM.ITEMCODE MALZEMENO, ITM.ITEMNAME AS MALZEMEADI,
(SELECT MIN(UNITPRICE) FROM ORDERDETAILS OD WHERE OD.ITEMID = ITM.ID) AS MINFÝYAT,
ROUND((SELECT AVG(UNITPRICE) FROM ORDERDETAILS OD WHERE OD.ITEMID = ITM.ID),2) AS ORTALAMAFÝYAT,
(SELECT MAX(UNITPRICE) FROM ORDERDETAILS OD WHERE OD.ITEMID = ITM.ID) AS MAXFÝYAT

FROM ITEMS ITM

---FUNCTIONS IN T-SQL
CREATE FUNCTION DBO.GET_MIN_PRICE(@ITEMID AS INT)
RETURNS FLOAT
AS
BEGIN
DECLARE @RESULT AS FLOAT
SELECT @RESULT = MIN(UNITPRICE) FROM ORDERDETAILS OD WHERE OD.ITEMID = @ITEMID
RETURN  @RESULT
END


SELECT ITM.ID, ITM.ITEMCODE MALZEMENO, ITM.ITEMNAME AS MALZEMEADI,
DBO.GET_MIN_PRICE(ITM.ID) AS ENDUSUKFIYAT

--(SELECT MIN(UNITPRICE) FROM ORDERDETAILS OD WHERE OD.ITEMID = ITM.ID) AS MINFÝYAT,
--ROUND((SELECT AVG(UNITPRICE) FROM ORDERDETAILS OD WHERE OD.ITEMID = ITM.ID),2) AS ORTALAMAFÝYAT,
--(SELECT MAX(UNITPRICE) FROM ORDERDETAILS OD WHERE OD.ITEMID = ITM.ID) AS MAXFÝYAT
FROM ITEMS ITM


----- DETERMINE CAR CATEGORIES ON THEIR KM 
-- 0 AND 50 NEW
--50 AND 100 MODERATE
--100 AND 500 OLD
--- 500 AND OVER ANCIENT
SELECT 
SUM( CASE WHEN KM =0  THEN 1 ELSE 0
END) AS  '0_KÝLOMETRE',
SUM(CASE 
	WHEN KM >0 AND KM<=50000 THEN 1
	ELSE 0
	END) AS '0-50BÝNKM',
SUM(CASE WHEN KM>50000 AND KM<=100000 THEN 1 ELSE 0 END) AS '50-100BÝNKM',
SUM(CASE WHEN KM>100000 AND KM<=500000 THEN 1 ELSE 0 END) AS '100-500BÝNKM',
SUM(CASE WHEN KM>500000 THEN 1 ELSE 0 END) '500BÝN ÜSTÜ'
FROM WEBOFFERS


